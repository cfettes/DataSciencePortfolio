/*PRODUCT AND ORDER ANALYSIS - HOW USERS REORDER ITEMS
Task: to analyse user orders and reorder*/ 

/*SQL queries completed as part of Learn SQL Basics for Data Science Specialisation on Coursera; Module 2: Data Wrangling, Analysis and AB Testing with SQL
These queries use a synthetic e-commerce dataset, which can be accessed by signing up to Mode analytics through https://mode.com/, then following the link 
https://modeanalytics.com/dsv1069/reports/0401f3197d05, and then clicking the 'clone' button to make a copy of the report. Once these steps have been completed, 
queries can be made on the dataset*/

--find user count
SELECT COUNT(*) FROM dsv1069.users;
--117178

--how many users have ever ordered
SELECT 
  COUNT(DISTINCT user_id) AS users_with_orders
FROM 
  dsv1069.orders;
--17463

--how many users have reordered the same item
SELECT
  COUNT(DISTINCT user_id) AS users_who_ordered
FROM
  (
  SELECT 
    user_id,
    item_id,
    COUNT(DISTINCT line_item_id) AS times_user_ordered
  FROM dsv1069.orders
  GROUP BY
    user_id,
    item_id
  ) user_level_orders
WHERE times_user_ordered > 1;
--211 users have reordered an item

--do users order more than once?
SELECT 
  COUNT(DISTINCT user_id)
FROM
  (
  SELECT  
    user_id,
    COUNT(DISTINCT invoice_id) AS order_count
  FROM dsv1069.orders
  GROUP BY
    user_id
  ) user_level
WHERE
  order_count > 1;
--1421 users ordered more than once

--orders per item: are there any items ordered very often?
SELECT  
  item_id,
  COUNT(line_item_id) AS times_ordered
FROM dsv1069.orders
GROUP BY
  item_id;
--results show fairly evenly distributed; no apparent best-sellers

--orders per item category
SELECT  
  item_category,
  COUNT(line_item_id) AS times_ordered
FROM dsv1069.orders
GROUP BY
  item_category;
--again, quite evenly distributed - no category appears to have much higher/lower sales

--do users order multiple things from the same category?
SELECT 
  item_category,
  AVG(times_category_ordered) AS avg_times_category_ordered
FROM
(
SELECT 
  user_id,
  item_category,
  COUNT(DISTINCT line_item_id) AS times_category_ordered
FROM dsv1069.orders
GROUP BY
  user_id,
  item_category
) user_level
GROUP BY item_category;
--most categories have average 2.3-2.4
--shows when ever someone orders from one category, on average tend to order multiple items from same category
--suggests could recommend to users purchasing an item other items within same category

--find average time between orders made by a user
SELECT
  first_orders.user_id,
  date(first_orders.paid_at) AS first_order_date,
  date(second_orders.paid_at) AS second_order_date,
  (date(second_orders.paid_at) - date(first_orders.paid_at)) AS date_diff
FROM
(
SELECT  
  user_id,
  invoice_id,
  paid_at,
  DENSE_RANK( ) OVER (PARTITION BY user_id ORDER BY paid_at ASC) AS order_num
FROM  
  dsv1069.orders
) first_orders
JOIN
(
SELECT  
  user_id,
  invoice_id,
  paid_at,
  DENSE_RANK( ) OVER (PARTITION BY user_id ORDER BY paid_at ASC) AS order_num
FROM 
  dsv1069.orders
) second_orders
ON
  first_orders.user_id = second_orders.user_id
WHERE
  first_orders.order_num = 1
AND 
  second_orders.order_num = 2;
--this query focuses on date difference between first and second orders of a user
--this does generate duplicates as generates a row for every item ordered in an order
